{
  "Id": "vCenterServerAppliance",
  "BackEnd": "Scriptable",
  "Meta": {
    "Filename": "vCenterServerAppliance.json",
    "OldVersion1": "0.1 - 20/07/2021 - First Issue",
    "CurrentVersion": "0.2 - 04/08/2021 - use dir-cli to manage SSO users. Implement CheckSystem, ChangePassword, DiscoverAccounts",
    "Abstract": "Custom platform for managing SSO accounts and the local root account in VMware vCenter Server Appliance",
    "Abstract2": "root and administrator@vsphere.local account passwords must be identical and will be kept in sync by SPP.",
    "Abstract3": "Service Account used in Safeguard must be named Administrator"
  },

  "CheckSystem": {
    "Parameters": [
      {
        "Port": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 22
        }
      },
      {
        "Timeout": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 20
        }
      },
      {
        "Address": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "FuncUserName": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "FuncPassword": {
          "Type": "Secret",
          "Required": false
        }
      },
      {
        "AssetName": {
          "Type": "String",
          "Required": false,
          "DefaultValue": ""
        }
      },
      {
        "DelegationPrefix": {
          "Type": "String",
          "Required": false,
          "DefaultValue": "sudo"
        }
      },
      {
        "CheckHostKey": {
          "Type": "Boolean",
          "Required": false,
          "DefaultValue": true
        }
      },
      {
        "HostKey": {
          "Type": "String",
          "Required": false
        }
      },
      {
        "RequestTerminal": {
          "Type": "Boolean",
          "Required": false,
          "DefaultValue": true
        }
      },
      {
        "UserKey": {
          "Type": "Secret",
          "Required": false
        }
      }
    ],
    "Do": [
      {
        "SetItem": {
          "Name": "Global:InRootShell",
          "Value": false
        }
      },
      {
        "Function": {
          "Name": "LoginSsh",
          "ResultVariable": "LoginResult",
          "Parameters": [ "%FuncUserName%", "%FuncPassword%", "%UserKey::$%" ]
        }
      },
      { "Wait": { "Seconds": 1 } },
      {
        "Function": {
          "Name": "ValidateAccount",
          "ResultVariable": "ValidateResult"
        }
      },
      {
        "Function": {
          "Name": "LogoutSsh",
          "ResultVariable": "LogoutResult"
        }
      },
      { "Return": { "Value": "%ValidateResult%" } }
    ]
  },
  "CheckPassword": {
    "Parameters": [
      {
        "Port": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 22
        }
      },
      {
        "Timeout": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 20
        }
      },
      {
        "Address": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "FuncUserName": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "FuncPassword": {
          "Type": "Secret",
          "Required": false
        }
      },
      {
        "AccountUserName": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "AccountPassword": {
          "Type": "Secret",
          "Required": true
        }
      },
      {
        "AssetName": {
          "Type": "String",
          "Required": false,
          "DefaultValue": ""
        }
      },
      {
        "DelegationPrefix": {
          "Type": "String",
          "Required": false,
          "DefaultValue": "sudo"
        }
      },
      {
        "CheckHostKey": {
          "Type": "Boolean",
          "Required": false,
          "DefaultValue": true
        }
      },
      {
        "HostKey": {
          "Type": "String",
          "Required": false
        }
      },
      {
        "RequestTerminal": {
          "Type": "Boolean",
          "Required": false,
          "DefaultValue": true
        }
      },
      {
        "UserKey": {
          "Type": "Secret",
          "Required": false
        }
      }
    ],
    "Do": [
      {
        "SetItem": {
          "Name": "Global:InRootShell",
          "Value": false
        }
      },
      {
        "Function": {
          "Name": "LoginSsh",
          "ResultVariable": "LoginResult",
          "Parameters": [ "%AccountUserName%", "%AccountPassword%", "%UserKey::$%" ]
        }
      },
      {
        "Function": {
          "Name": "LogoutSsh",
          "ResultVariable": "LogoutResult"
        }
      },
      { "Return": { "Value": "%LoginResult%" } }
    ]
  },
  "ChangePassword": {
    "Parameters": [
      {
        "Port": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 22
        }
      },
      {
        "Timeout": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 20
        }
      },
      {
        "Address": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "FuncUserName": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "FuncPassword": {
          "Type": "Secret",
          "Required": false
        }
      },
      {
        "AccountUserName": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "AccountPassword": {
          "Type": "Secret",
          "Required": true
        }
      },
      {
        "NewPassword": {
          "Type": "Secret",
          "Required": true
        }
      },
      {
        "AssetName": {
          "Type": "String",
          "Required": false,
          "DefaultValue": ""
        }
      },
      {
        "DelegationPrefix": {
          "Type": "String",
          "Required": false,
          "DefaultValue": "sudo"
        }
      },
      {
        "CheckHostKey": {
          "Type": "Boolean",
          "Required": false,
          "DefaultValue": true
        }
      },
      {
        "HostKey": {
          "Type": "String",
          "Required": false
        }
      },
      {
        "RequestTerminal": {
          "Type": "Boolean",
          "Required": false,
          "DefaultValue": true
        }
      },
      {
        "UserKey": {
          "Type": "Secret",
          "Required": false
        }
      }
    ],
    "Do": [
      {
        "SetItem": {
          "Name": "Global:InRootShell",
          "Value": false
        }
      },
      {
        "Function": {
          "Name": "LoginSsh",
          "ResultVariable": "LoginResult",
          "Parameters": [ "%FuncUserName%", "%FuncPassword%", "%UserKey::$%" ]
        }
      },
      {
        "Function": {
          "Name": "ChangeSsoUserPassword",
          "ResultVariable": "ChangeUserPasswordResult"
        }
      },
      {
        "Condition": {
          "If": "(AccountUserName == FuncUserName) && ChangeUserPasswordResult",
          "Then": {
            "Do": [
              {
                "Send": {
                  "ConnectionObjectName": "ConnectSsh",
                  "Buffer": "exit"
                }
              },
              {
                "Function": {
                  "Name": "ChangeRootUserPassword",
                  "ResultVariable": "ChangeUserPasswordResult"
                }
              }
            ]
          }
        }
      },
      {
        "Function": {
          "Name": "LogoutSsh",
          "ResultVariable": "LogoutResult"
        }
      },
      { "Return": { "Value": "%ChangeUserPasswordResult%" } }
    ]
  },
  "DiscoverSshHostKey": {
    "Parameters": [
      {
        "Port": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 22
        }
      },
      {
        "Timeout": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 20
        }
      },
      {
        "Address": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "AssetName": {
          "Type": "String",
          "Required": false,
          "DefaultValue": ""
        }
      }
    ],
    "Do": [
      { "Function": { "Name": "DiscoverHostKeyForAsset" } },
      { "Return": { "Value": true } }
    ]
  },
  "DiscoverAccounts": {
    "Parameters": [
      {
        "Port": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 22
        }
      },
      {
        "Timeout": {
          "Type": "Integer",
          "Required": false,
          "DefaultValue": 20
        }
      },
      {
        "Address": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "FuncUserName": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "FuncUserDomain": {
          "Type": "String",
          "Required": false,
          "DefaultValue": ""
        }
      },
      {
        "FuncPassword": {
          "Type": "Secret",
          "Required": false
        }
      },
      {
        "AssetName": {
          "Type": "String",
          "Required": false,
          "DefaultValue": ""
        }
      },
      {
        "DelegationPrefix": {
          "Type": "String",
          "Required": false,
          "DefaultValue": ""
        }
      },
      {
        "CheckHostKey": {
          "Type": "Boolean",
          "Required": false,
          "DefaultValue": true
        }
      },
      {
        "UserKey": {
          "Type": "Secret",
          "Required": false
        }
      },
      {
        "HostKey": {
          "Type": "string",
          "Required": false
        }
      },
      {
        "DiscoveryQuery": {
          "Type": "Object",
          "Required": true
        }
      }
    ],
    "Do": [
      {
        "SetItem": {
          "Name": "Global:RequestTerminal",
          "Value": true
        }
      },
      {
        "SetItem": {
          "Name": "Global:EnableAllCiphers",
          "Value": false
        }
      },
      {
        "SetItem": {
          "Name": "Global:InRootShell",
          "Value": false
        }
      },
      {
        "Try": {
          "Do": [
            {
              "Function": {
                "Name": "LoginSsh",
                "ResultVariable": "LoginResult",
                "Parameters": [ "%FuncUserName%", "%FuncPassword%", "%UserKey%" ]
              }
            },
            {
              "Condition": {
                "If": "!LoginResult",
                "Then": {
                  "Do": [
                    { "Comment": { "Text": "Able to connect, unable to log in" } },
                    { "Return": { "Value": false } }
                  ]
                }
              }
            }
          ],
          "Catch": [
            { "Comment": { "Text": "Unable to connect to the asset" } },
            { "Return": { "Value": "Error" } }
          ]
        }
      },
      {
        "Function": {
          "Name": "GetUserList",
          "ResultVariable": "GetUserListResult"
        }
      },
      {
        "Function": {
          "Name": "LogoutSsh",
          "ResultVariable": "LogoutResult"
        }
      },
      { "Return": { "Value": "%GetUserListResult%" } }
    ]
  },
  "LoginSsh": {
    "Parameters": [
      {
        "UserName": {
          "Type": "String",
          "Required": true
        }
      },
      {
        "Password": {
          "Type": "Secret",
          "Required": false
        }
      },
      {
        "LoginKey": {
          "Type": "Secret",
          "Required": false
        }
      }
    ],
    "Do": [
      {
        "Status": {
          "Type": "Connecting",
          "Percent": 30,
          "Message": {
            "Name": "AssetConnectingWithAddress",
            "Parameters": [ "%AssetName%", "%Address%" ]
          }
        }
      },
      {
        "Try": {
          "Do": [
            {"Comment":  {"Text": "Explicitly set user to 'root' as we are mandating root and Administrator@vsphere.local have same password"}},
            {
              "Connect": {
                "ConnectionObjectName": "Global:ConnectSsh",
                "Type": "Ssh",
                "Port": "%Port%",
                "NetworkAddress": "%Address%",
                "Login": "root",
                "Password": "%Password::$%",
                "RequestTerminal": "%RequestTerminal%",
                "UserKey": "%LoginKey::$%",
                "CheckHostKey": "%CheckHostKey%",
                "Hostkey": "%HostKey::$%",
                "Timeout": "%Timeout%"
              }
            }
          ],
          "Catch": [
            { "Throw": { "Value": "SSH Connection Error: %Exception%" } }
          ]
        }
      },
      {
        "Receive": {
          "ConnectionObjectName": "ConnectSsh",
          "BufferName": "LoginCheckBuffer"
        }
      },
      {
        "Condition": {
          "If": "Regex.IsMatch(LoginCheckBuffer, @\"(You are required to change your password)|(Your password has expired)|(Check for other error messages here)\")",
          "Then": {
            "Do": [
              { "Function": { "Name": "LogoutSsh" } },
              { "Return": { "Value": false } }
            ]
          }
        }
      },
      { "Return": { "Value": true } }
    ]
  },
  "LogoutSsh": {
    "Do": [
      { "Disconnect": { "ConnectionObjectName": "ConnectSsh" } },
      { "Return": { "Value": true } }
    ]
  },
  "ValidateAccount": {
    "Do": [
      {
        "Status": {
          "Type": "Checking",
          "Percent": "60",
          "Message": {
            "Name": "AssetTestingConnectionWithAddress",
            "Parameters": [ "%AssetName%", "%Address%" ]
          }
        }
      },
      { "Comment": { "Text": "Get the functional account user and verify role is superAdmin. Remember we are hardcoding root" } },
      {
        "Send": {
          "ConnectionObjectName": "ConnectSsh",
          "Buffer": "localaccounts.user.get --username root"
        }
      },
      {
        "Receive": {
          "ConnectionObjectName": "ConnectSsh",
          "BufferName": "ReturnStatus"
        }
      },
      {
        "Condition": {
          "If": "Regex.IsMatch(ReturnStatus, @\"Role: super[Aa]dmin\")",
          "Then": {
            "Do": [
              { "Return": { "Value": "true" } }
            ]
          },
          "Else": {
            "Do": [
              {
                "Status": {
                  "Type": "Discovering",
                  "Percent": 80,
                  "Message": {
                    "Name": "InsufficientPrivilegesChangePassword"
                  }
                }
              }
            ]
          }
        }
      }
    ]
  },
  "DiscoverHostKeyForAsset": {
    "Do": [
      {
        "Status": {
          "Type": "Connecting",
          "Percent": 30,
          "Message": {
            "Name": "AssetConnectingWithAddress",
            "Parameters": [ "%AssetName%", "%Address%" ]
          }
        }
      },
      {
        "Try": {
          "Do": [
            {
              "DiscoverSshHostKey": {
                "HostKeyVariableName": "HostKey",
                "SoftwareVersionVariableName": "GLOBAL:ServerSoftwareName",
                "Port": "%Port%",
                "NetworkAddress": "%Address%",
                "Timeout": "%Timeout%",
                "DiscoverHostKey": true,
                "Type": "Ssh"
              }
            },
            { "WriteResponseObject": { "Value": "%HostKey::$%" } }
          ],
          "Catch": [
            {
              "Condition": {
                "If": "string.IsNullOrEmpty(Exception)",
                "Then": {
                  "Do": [
                    {
                      "Status": {
                        "Type": "Connecting",
                        "Percent": 95,
                        "Message": {
                          "Name": "AssetConnectFailedWithAddress",
                          "Parameters": [ "%AssetName%", "%Address%" ]
                        }
                      }
                    },
                    { "Throw": { "Value": "SSH Connection Error" } }
                  ]
                },
                "Else": {
                  "Do": [
                    {
                      "Status": {
                        "Type": "Connecting",
                        "Percent": 95,
                        "Message": {
                          "Name": "AssetConnectFailedWithReasonAndAddress",
                          "Parameters": [ "%AssetName%", "%Address%", "%Exception%" ]
                        }
                      }
                    },
                    { "Throw": { "Value": "%Exception%" } }
                  ]
                }
              }
            }
          ]
        }
      }
    ]
  },

  "Functions": [
    {
      "Name": "ChangeSsoUserPassword",
      "Do": [
        {
          "Status": {
            "Type": "Changing",
            "Percent": 50,
            "Message": {
              "Name": "ChangingPassword",
              "Parameters": [ "%AccountUserName%" ]
            }
          }
        },
        {
          "Function": {
            "Name": "DirCli",
            "ResultVariable": "DirCliResult",
            "Parameters": [ "user find-by-name --account %AccountUserName%" ]
          }
        },
        {
          "Condition": {
            "If": "Regex.IsMatch(DirCliResult, @\"ERROR_NO_SUCH_USER\")",
            "Then": {
              "Do": [
                {
                  "Status": {
                    "Type": "Checking",
                    "Percent": 80,
                    "Message": {
                      "Name": "AccountNotFound",
                      "Parameters": [ "%AccountUserName%" ]
                    }
                  }
                },
                { "Return": { "Value": false } }
              ]
            },
            "Else": {
              "Do": [
                {
                  "Function": {
                    "Name": "DirCli",
                    "ResultVariable": "DirCliResult",
                    "Parameters": [ "password reset --account %AccountUserName%" ]
                  }
                },
                {
                  "Send": {
                    "ConnectionObjectName": "ConnectSsh",
                    "Buffer": "%NewPassword%",
                    "ContainsSecret": true
                  }
                },
                {
                  "Receive": {
                    "ConnectionObjectName": "ConnectSsh",
                    "BufferName": "PasswordReset"
                  }
                },
                {
                  "Condition": {
                    "If": "Regex.IsMatch(PasswordReset, @\"ERROR_WRITE_PROTECT\")",
                    "Then": {
                      "Do": [
                        {
                          "Status": {
                            "Type": "Checking",
                            "Percent": 80,
                            "Message": {
                              "Name": "PasswordFailedComplexity"
                            }
                          }
                        },
                        { "Return": { "Value": false } }
                      ]
                    },
                    "Else": {
                      "Do": [
                        { "Return": { "Value": true } }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },

    {
      "Name": "ChangeRootUserPassword",
      "Do": [
        {
          "Status": {
            "Type": "Changing",
            "Percent": 50,
            "Message": {
              "Name": "ChangingPassword",
              "Parameters": [ "%AccountUserName%" ]
            }
          }
        },
        {
          "Send": {
            "ConnectionObjectName": "ConnectSsh",
            "Buffer": "localaccounts.user.get --username root"
          }
        },
        {
          "Receive": {
            "ConnectionObjectName": "ConnectSsh",
            "BufferName": "UserPresent"
          }
        },
        {
          "Condition": {
            "If": "Regex.IsMatch(UserPresent, @\"Invalid local account name\")",
            "Then": {
              "Do": [
                {
                  "Status": {
                    "Type": "Checking",
                    "Percent": 80,
                    "Message": {
                      "Name": "AccountNotFound",
                      "Parameters": [ "root" ]
                    }
                  }
                },
                { "Return": { "Value": false } }
              ]
            }
          }
        },
        {
          "Send": {
            "ConnectionObjectName": "ConnectSsh",
            "Buffer": "localaccounts.user.password.update --username root --password"
          }
        },
        {
          "Receive": {
            "ConnectionObjectName": "ConnectSsh",
            "BufferName": "PasswdAttempt"
          }
        },
        {
          "Condition": {
            "If": "Regex.IsMatch(PasswdAttempt, @\"Enter password\")",
            "Then": {
              "Do": [
                {
                  "Send": {
                    "ConnectionObjectName": "ConnectSsh",
                    "Buffer": "%NewPassword%",
                    "ContainsSecret": true
                  }
                },
                {
                  "Receive": {
                    "ConnectionObjectName": "ConnectSsh",
                    "BufferName": "PasswdAttempt"
                  }
                }
              ]
            }
          }
        },
        {
          "Condition": {
            "If": "Regex.IsMatch(PasswdAttempt, @\"Reenter password\")",
            "Then": {
              "Do": [
                {
                  "Send": {
                    "ConnectionObjectName": "ConnectSsh",
                    "Buffer": "%NewPassword%",
                    "ContainsSecret": true
                  }
                },
                {
                  "Receive": {
                    "ConnectionObjectName": "ConnectSsh",
                    "BufferName": "PasswdAttempt"
                  }
                }
              ]
            }
          }
        },
        {
          "Condition": {
            "If": "Regex.IsMatch(PasswdAttempt, @\"(You provided no value for the required parameter)|(Input strings do not match)\")",
            "Then": {
              "Do": [
                {
                  "Status": {
                    "Type": "Checking",
                    "Percent": 80,
                    "Message": {
                      "Name": "PasswordChangeFailed",
                      "Parameters": [ "%AccountUserName%" ]
                    }
                  }
                },
                { "Return": { "Value": false } }
              ]
            }
          }
        },
        { "Return": { "Value": true } }
      ]
    },

    {
      "Name": "EnterShell",
      "Do": [
        {
          "Condition": {
            "If": "!InRootShell",
            "Then": {
              "Do": [
                { "Wait": { "Seconds": 1 } },
                {
                  "Send": {
                    "ConnectionObjectName": "ConnectSsh",
                    "Buffer": "shell"
                  }
                },
                {
                  "Receive": {
                    "ConnectionObjectName": "ConnectSsh",
                    "BufferName": "EnterShell"
                  }
                },
                {
                  "Condition": {
                    "If": "Regex.IsMatch(EnterShell, @\"Shell access is granted\")",
                    "Then": {
                      "Do": [
                        { "Log": { "Text": "Entered root shell" } },
                        {
                          "SetItem": {
                            "Name": "Global:InRootShell",
                            "Value": true
                          }
                        },

                        { "Return": { "Value": true } }

                      ]
                    },
                    "Else": {
                      "Do": [
                        {
                          "Status": {
                            "Type": "Discovering",
                            "Percent": 80,
                            "Message": {
                              "Name": "InsufficientPrivilegesChangePassword"
                            }
                          }
                        },
                        { "Throw": { "Value": "Can't access root shell" } },
                        { "Return": { "Value": false } }
                      ]
                    }
                  }
                }
              ]
            },
            "Else": {
              "Do": [
                { "Return": { "Value": true } }
              ]
            }
          }
        }
      ]
    },

    {
      "Name": "DirCli",
      "Parameters": [
        {
          "CmdContent": {
            "Type": "string",
            "Required": true
          }
        }
      ],
      "Do": [
        {
          "Function": {
            "Name": "EnterShell",
            "ResultVariable": "EnterShellResult"
          }
        },
        {
          "Send": {
            "ConnectionObjectName": "ConnectSsh",
            "Buffer": "/usr/lib/vmware-vmafd/bin/dir-cli %CmdContent%"
          }
        },
        {
          "Receive": {
            "ConnectionObjectName": "ConnectSsh",
            "BufferName": "DirCmdResponse"
          }
        },
        {
          "Send": {
            "ConnectionObjectName": "ConnectSsh",
            "Buffer": "%FuncPassword%",
            "ContainsSecret": true
          }
        },
        {
          "Receive": {
            "ConnectionObjectName": "ConnectSsh",
            "BufferName": "DirCmdResponse"
          }
        },
        {
          "Return": { "Value": "%DirCmdResponse%" }
        }
      ]
    },

    {
      "Name": "GetUserList",
      "Do": [
        { "Comment": { "Text": "Retrieve all users in the Administrators group who are not external or service principals" } },
        {
          "Function": {
            "Name": "DirCli",
            "ResultVariable": "DirCliResult",
            "Parameters": [ "group list --name Administrators | awk 'BEGIN {FS=\",\"} {ORS=\"|\"} {split($0,a)} {if (a[2] != \"CN=ServicePrincipals\") split(a[1],b,\"=\")} {if(b[1] == \"CN\" || b[1] == \"cn\") print b[2]}'" ]
          }
        },
        {
          "Split": {
            "DelimiterChars": [ "|" ],
            "Source": "%DirCliResult%",
            "ResultVariableName": "UserList"
          }
        },
        {
          "ForEach": {
            "CollectionName": "UserList",
            "ElementName": "DiscoveredUser",
            "Body": {
              "Do": [
                {
                  "WriteDiscoveredAccount": {
                    "Name": "%{DiscoveredUser}%"
                  }
                }
              ]
            }
          }
        },
        { "Return": { "Value": true } }
      ]
    },

    {
      "Name": "GetUserList2",
      "Do": [
        { "Comment": { "Text": "Retrieve all users in the Administrators group who are neither external nor service principals" } },
        {
          "Function": {
            "Name": "DirCli",
            "ResultVariable": "DirCliResult",
            "Parameters": [ "group list --name Administrators | awk 'BEGIN {FS=\",\"} {ORS=\"|\"} {split($0,a)} {if (a[2] != \"CN=ServicePrincipals\") split(a[1],b,\"=\")} {if(b[1] == \"CN\" || b[1] == \"cn\") print b[2]}'" ]
          }
        },
        {
          "Split": {
            "DelimiterChars": [ "|" ],
            "Source": "%DirCliResult%",
            "ResultVariableName": "UserList"
          }
        },
        {
          "Condition": {
            "If": "UserList.Count > 0",
            "Then": {
              "Do": [
                {
                  "SetItem": {
                    "Name": "i",
                    "Value": 0
                  }
                },
                {
                  "For": {
                    "Before": "i = 0",
                    "Condition": "i < UserList.Count - 1",
                    "End": "i = i + 1",
                    "Body": {
                      "Do": [
                        {
                          "WriteDiscoveredAccount": {
                            "Name": "%{UserList[i]}%"
                          }
                        }
                      ]
                    }
                  }
                },
                { "Return": { "Value": true } }

              ]
            },
            "Else": {
              "Do": [
                { "Log": { "Text": "No users discovered" } },
                {
                  "Return": { "Value": false }
                }
              ]
            }
          }
        }
      ]
    }
  ]
}